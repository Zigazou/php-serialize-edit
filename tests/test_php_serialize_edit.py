from unittest import TestCase, main
from parameterized import parameterized
from pse.php_serialize_edit import (
    php_serialize, php_unserialize, Query, php_modify, ParseError
)


class TestPHPSerializeEdit(TestCase):
    @parameterized.expand([
        ["int", b"i:124;", 124],
        ["float", b"d:124.56;", 124.56],
        ["false", b"b:0;", False],
        ["true", b"b:1;", True],
        ["array1", b"a:2:{i:0;i:0;i:1;i:1;}", [(0, 0), (1, 1)]],
        ["array2", b'a:3:{i:0;a:2:{s:1:"a";b:1;s:1:"b";b:0;}i:1;i:0;i:2;i:1;}',
            [(0, [(b"a", True), (b"b", False)]), (1, 0), (2, 1)]],
        ["object1", b'O:6:"Person":2:{s:4:"name";s:4:"Jane";s:3:"age";i:25;}',
            (b"Person", [(b"name", b"Jane"), (b"age", 25)])],
    ])
    def test_php_unserialize(self, _name, serialized, expected):
        self.assertEqual(php_unserialize(serialized), expected)

    @parameterized.expand([
        ["int", b"i:124;"],
        ["float", b"d:124.56;"],
        ["false", b"b:0;"],
        ["true", b"b:1;"],
        ["array1", b"a:2:{i:0;i:0;i:1;i:1;}"],
        ["array2",
            b'a:3:{i:0;a:2:{s:1:"a";b:1;s:1:"b";b:0;}i:1;i:0;i:2;i:1;}'],
        ["object1", b'O:6:"Person":2:{s:4:"name";s:4:"Jane";s:3:"age";i:25;}'],
    ])
    def test_idempotence(self, _name, serialized):
        self.assertEqual(php_serialize(
            php_unserialize(serialized)), serialized)

    @parameterized.expand([
        ["get1", [(0, 0), (1, 1)], b"G:1", 1],
        ["get2", [(0, 0), (1, [(b"a", 10), (b"b", 12)])], b'G:1/"b"', 12],
        ["get3", 12.3, b"G:", 12.3],
        ["get4", 12.3, b"G:1", None],
        ["get5", [], b"G:1", None],
        ["get6", [], b"G:", []],
        ["get7", (b"Person", [(b"name", b"Jane"), (b"age", 25)]),
         b'G:"name"', b'Jane'],
        ["set1", [(0, 0), (1, 1)], b"S:2/1=3", [
            (0, 0), (1, 1), (2, [(1, 3)])]],
        ["set2", [(0, 0), (1, 1)], b"S:=3", 3],
        ["set3", [(0, 0), (1, 1)], b'S:="xyz"', b"xyz"],
        ["set4", [(0, 0), (1, 1)], b'S:0="xyz"', [(0, b"xyz"), (1, 1)]],
        ["set5", [(0, 0), (1, 1)], b"S:0=false", [(0, False), (1, 1)]],
        ["set6", [(0, 0), (1, 1)], b"S:1=true", [(0, 0), (1, True)]],
        ["set7", [(0, 0), (1, 1)], b"S:0=[0:0,1:1]", [(0, [(0, 0), (1, 1)]),
                                                      (1, 1)]],
        ["set8", None, b'S:=[["a":"b","c":"d"]:true]',
            [([(b"a", b"b"), (b"c", b"d")], True)]],
        ["set9", [(0, 0), (1, 1)], b"S:=3.3", 3.3],
        ["set10", [(3.3, 0), (1, 1)], b"S:3.3=1", [(3.3, 1), (1, 1)]],
        ["set11", (b"Person", [(b"name", b"Jane"), (b"age", 25)]),
         b'S:"name"="John"', (b"Person", [(b"name", b"John"), (b"age", 25)])],
        ["delete1", [(0, 0), (1, 1)], b"D:0", [(1, 1)]],
        ["delete2", [(0, 0), (1, [(b"a", 10), (b"b", 12)])], b'D:1/"b"',
         [(0, 0), (1, [(b"a", 10)])]],
        ["delete3", (b"Person", [(b"name", b"Jane"), (b"age", 25)]),
         b'D:"name"', (b"Person", [(b"age", 25)])],
    ])
    def test_query(self, _name, initial, expression, expected):
        self.assertEqual(Query(initial).run(expression), expected)

    @parameterized.expand([
        ["int", b"i:124;", b"S:=125", b"i:125;"],
        ["set1", b"b:0;", b'S:=[["a":"b","c":"d"]:true]',
            b'a:1:{a:2:{s:1:"a";s:1:"b";s:1:"c";s:1:"d";}b:1;}'],
        ["set2", b"b:0;", b'S:={"Person",["name":"Jane","age":25]}',
            b'O:6:"Person":2:{s:4:"name";s:4:"Jane";s:3:"age";i:25;}'],
        ["array1", b"a:2:{i:0;i:0;i:1;i:1;}", b"D:1", b"a:1:{i:0;i:0;}"],
        ["array2",
            b'a:3:{i:0;a:2:{s:1:"a";b:1;s:1:"b";b:0;}i:1;i:0;i:2;i:1;}',
            b'S:0/"a"=12',
            b'a:3:{i:0;a:2:{s:1:"a";i:12;s:1:"b";b:0;}i:1;i:0;i:2;i:1;}'],
    ])
    def test_php_modify(self, _name, serialized, expression, expected):
        self.assertEqual(php_modify(serialized, expression), expected)

    @parameterized.expand([
        ["invalid_get1", b"G=123"],
        ["invalid_get2", b"G:123.abc"],
        ["invalid_set1", b"S:123=abc"],
        ["invalid_set2", b"S:key:value"],
        ["invalid_delete1", b"D:abc.def"],
        ["invalid_delete2", b"D:123 456"]
    ])
    def test_invalid(self, _name, expression):
        with self.assertRaises(ParseError):
            Query([]).run(expression)

    # These test strings are generated from the grammar by the
    # generate_grammar_valid_expression.py script
    @parameterized.expand([
        ["valid", b'S:"~[8({8"=274854184549.'],
        ["valid", b'S:3532498418096=-9.'],
        ["valid", b'D:-91030637933084'],
        ["valid", b'D:"Rar"'],
        ["valid", b'S:1681484771.15129203520626/"8"/"c ."/"L4n I?uK[$DD28"=true'],
        ["valid", b'D:" ;5eRP@m?9$s!"'],
        ["valid", b'D:-092133437'],
        ["valid", b'S:130242026102283={"(Elb!",[-112497.:false]}'],
        ["valid", b'G:"\\\\\\"ILW&f_\'^p*z"/-6568038851458/"IZth~N3\'\'"'],
        ["valid", b'G:"du>"'],
        ["valid", b'G:0486008537567'],
        ["valid", b'D:0276208105'],
        ["valid", b'D:"v"'],
        ["valid", b'D:78505263961039'],
        ["valid", b'S:"0@5H=yzJZ(5"="G8;Bj"'],
        ["valid", b'S:"x^"="3{j"'],
        ["valid", b'D:"QqK{H^vk"/390488793.47177522718'],
        ["valid", b'D:35355846318.7478'],
        ["valid", b'D:"lrxQSVE|)afn"'],
        ["valid", b'D:"NAgjq<fiK<+I W"/"X$e"'],
        ["valid", b'S:"&S"/"]5.1WfniZ{7ZX\\\\"/">"/"wt"/545435/"(ZI _/yaA\\\\.:wR"=null'],
        ["valid", b'D:"~lGw\'j8\\\\v9/J"/"IG{"/-645778289323/"RL?|PMAERu"'],
        ["valid", b'D:-946689.85350436281/2392057626446/"3t~"'],
        ["valid", b'G:"Pk#D+2gzKOMKK^Z"/"Jl^b56c"/"BnTy/Mr?\\\\n"'],
        ["valid", b'S:957020607.813783/-0.37283="<R R_X"'],
        ["valid", b'D:"#xdo_"/"_Trp~"'],
        ["valid", b'G:6243700922525'],
        ["valid", b'D:"72@U62DC5\\\\@f]~"'],
        ["valid", b'S:=69568647142642'],
        ["valid", b'S:"qN!GX-,4*|an<dz"/"2pQ~J[]="=-15830.8590'],
        ["valid", b'D:-8785'],
        ["valid", b'S:=true'],
        ["valid", b'S:"{AVI"="}uxz_6D6pu1"'],
        ["valid", b'S:"p3$(`PC^# b&"/"T%|W"/-823903557300=">gmM=\'0t"'],
        ["valid", b'G:'],
        ["valid", b'D:",%A5.J=voaN"'],
        ["valid", b'S:238469853827="nYM;=iv6Auj\'hIb"'],
        ["valid", b'D:"-Arv84;Eg7"'],
        ["valid", b'D:"LTET&o6ZV8g5j"/432345365374610'],
        ["valid", b'S:=null'],
        ["valid", b'D:"j`.[p"/"`/\'Q+mE"'],
        ["valid", b'G:73563294540140'],
        ["valid", b'S:"eZ"=")dXG*Eq5t8+j"'],
        ["valid", b'S:"g`"="X4iF$nkAY)\\"b"'],
        ["valid", b'D:9745778/17971858.328806'],
        ["valid", b'D:"hrd,D$,\\\\G}[E-+"'],
        ["valid", b'G:"rp)"'],
        ["valid", b'S:"pND:\\\\Y\\\\U~p)F]E"="^(@jBR-C%fT#\'%e"'],
        ["valid", b'S:="u,i"'],
        ["valid", b'G:"7;]at!Y"/"HUd=%*afM.7"'],
        ["valid", b'G:11.258/41642.73690279/7913780074668.74238/531401179/234.314245969/"_^"/-6209'],
        ["valid", b'D:-3120426989.0878'],
        ["valid", b'S:568120995.4006291910=-4533433'],
        ["valid", b'D:9491207.44417093190/"v8v^4R(P"/-38312409'],
        ["valid", b'S:=44788.'],
        ["valid", b'S:=07305411.929'],
        ["valid", b'S:"@[sTaZD}M"="gb|?"'],
        ["valid", b'D:"yZlj"/0.3/"WM&2\'X4:-;"/"yK{Js8"'],
        ["valid", b'S:="*k.X>:<n:Z-}V"'],
        ["valid", b'D:711994444575'],
        ["valid", b'S:=-311978644542.882'],
        ["valid", b'D:-98894239988950.140390692711'],
        ["valid", b'D:099233818/-466.51952/-76/"M2t.IB"/695396722265.6527346097253'],
        ["valid", b'D:"y{o!/GF:~"/"sK2td>8>kA*XoTt"/5767494/83/"mbR*s[)v"'],
        ["valid", b'D:379718770/614078'],
        ["valid", b'S:-64209=1'],
        ["valid", b'D:46542413718657'],
        ["valid", b'S:"B,"=-66.84852905637'],
        ["valid", b'G:-4523535076510/7532346520/-044462410718'],
        ["valid", b'S:-69277.3391/-424.452/-56106125588042/-97.889048286374/-080.9975456542971/"jA:?rcuO"=38846189433366'],
        ["valid", b'S:"D"=":Z("'],
        ["valid", b'S:0959080/"\\\\"=false'],
        ["valid", b'S:"|n#%@Bs@$Z"/0739182672641/-87432603940797.44470=null'],
        ["valid", b'S:="&3%I4m7;k\\\\"'],
        ["valid", b'D:3.058732131'],
        ["valid", b'D:248'],
        ["valid", b'G:"kXqr3(6Yu[bla{"'],
        ["valid", b'D:"=8"'],
        ["valid", b'G:"8"'],
        ["valid", b'G:" Di,Bk"'],
    ])
    def test_valid(self, _name, expression):
        try:
            Query([]).run(expression)
        except ParseError as e:
            raise AssertionError(f'Error on {expression}: {e}')
    @parameterized.expand([
        ["invalid", b': =  {xxx X  zxI+ 3,[ullxtrue nullx6 53 8 9 26 5  ] }'],
        ["invalid", b'x59xxx'],
        ["invalid", b'x = ull'],
        ["invalid", b' D:" ix H qe  \\\\ (xR0  ^x B.x/ -  4 74x 72  16 0 x1 6 . 3'],
        ["invalid", b'S- 8 2 4 92xxx5  43xx"  1b9  yx'],
        ["invalid", b' S:73 60 3 x 1'],
        ["invalid", b':" F zx 9 iNd^ " /xR g-0 x 838 4x4 2x 4=x'],
        ["invalid", b':xx[ y x+y x 0v x7 /x70 x 12  8 1'],
        ["invalid", b'D: " 81  ; L3 E &r "| x oa O jxC"'],
        ["invalid", b':  -x .'],
        ["invalid", b'D: xoxx/  9 16 x5 3x3 x 4 /w w"x 7x16 15 4 /]q \\\\ 5 "'],
        ["invalid", b'D0/" \\W  f10sJxx"'],
        ["invalid", b'Snul'],
        ["invalid", b'D: x S) o Ex" '],
        ["invalid", b':- .9 7 '],
        ["invalid", b' D:x'],
        ["invalid", b':xxrue'],
        ["invalid", b':57 x0 xx4 8 8 /-  0 1xx2 873/  -x9 x6 xxx -6xx 2'],
        ["invalid", b'D:"aW 6$x'],
        ["invalid", b' D:[y "xx4 x4 08 1 x2  . 3x3 xx^" '],
        ["invalid", b'D: - 94  4x7 .x0  3'],
        ["invalid", b':x 5x 24 02 3x11  7 .x 9 0x'],
        ["invalid", b'Dx2 0x.x 6 03 5 2x5 )"x]l]" xx 173 / "  gxS  "'],
        ["invalid", b'Sxx'],
        ["invalid", b' D:x }P x'],
        ["invalid", b'Dxx. x'],
        ["invalid", b' G:'],
        ["invalid", b'x4 3x30x7x'],
        ["invalid", b'xxx'],
        ["invalid", b'x" x@ F xZ? x =xx 85 '],
        ["invalid", b'G:B y=x( +x'],
        ["invalid", b': = - 5 4xx6 7 0x4'],
        ["invalid", b' G: ". O xj xN xK 8D'],
        ["invalid", b' D: "h   i lx[x exx @xjx 4x "'],
        ["invalid", b'x 9'],
        ["invalid", b'D:x c ncMs o \\xt N.  K"x-7 8  26 "xxxx @ @i j'],
        ["invalid", b'x - 6401 xx9 x82 7586 6 x 9/ 6 9 1x 7'],
        ["invalid", b' G:x 735 20  0'],
        ["invalid", b' D:91 xx 640 x6 3x0 74 46 x'],
        ["invalid", b'D" = cx'],
        ["invalid", b'D: 8 8 x 88  3'],
        ["invalid", b'x "1J >  }[  2 < "x7  56 5  1'],
        ["invalid", b': "T QxxVxxn x" /x6 !s "'],
        ["invalid", b'G: '],
        ["invalid", b'xG R xer Bxx'],
        ["invalid", b'S: x= null'],
        ["invalid", b' S:xxull'],
        ["invalid", b'D: "xg  /66 0 5xx 79 7 7x9 '],
        ["invalid", b'Sx1 xxx2x x oxx7 G xx= rue'],
        ["invalid", b' S:"  =xOx | 7x"-2 / 8  fP  sxH xT z"/"xs  qLx Bx" x " Qt xt % j'],
        ["invalid", b' D:x 1 .8 x 5xx[t "'],
        ["invalid", b' S: "D R ,xx IXq % uxalse'],
        ["invalid", b'Gxu v2 $x !/  "xx xx03 x5 5 6 3xxx .x'],
        ["invalid", b'S:  "I u4"'],
        ["invalid", b'S: "b :x} - tru'],
        ["invalid", b'D3 9xx 8x63 908'],
        ["invalid", b'x 0xtru'],
        ["invalid", b'x'],
        ["invalid", b'Dx836 23 xx- 9 0 077 xx'],
        ["invalid", b':x= "0 Q$ xx \\"(  wx'],
        ["invalid", b'x 39 6 7 2 6= true'],
        ["invalid", b' G: 39x1x8 . 6 0 x00x5  8/ "  x#"/ 32 x8 2 0'],
        ["invalid", b'D: " ox   F> #xVx4  "/" x Y.Zxxs  k" wx'],
        ["invalid", b'S5 1 2x 46xxx= gc  ^\\ "'],
        ["invalid", b'S: 5  04  3795nul'],
        ["invalid", b' G:x'],
        ["invalid", b'G:"] x"x1 6 2 '],
        ["invalid", b'G:  '],
        ["invalid", b'S- x9x9  .1 1 /  - 3 7 7x=! t sf  5y8 " '],
        ["invalid", b'x" = + 0J v xxx7x8x.9 xxxl  00 mx   a %h x"x"Z 1 O~'],
        ["invalid", b': '],
        ["invalid", b'Gxx4 x 214x8 5xx5 9 9'],
        ["invalid", b'Sxx v@x86 8 6 21 2 3 4 x-8 3 2  77 x99 x2  5 0 55 9 =xx Ox Rxx)_ >!x'],
        ["invalid", b' D: -7 25  20 x5 3x/ " / x ^xx68 67  9x3 . 63 xx5 xxA ` xc xtE%8 gd" "x/-7 9  9 1777x38 8 6x-  68  5x9  46 00 0 6  3 2x/ @x;J  3xd/  1x 05 x8 14 x4 6  .xxx 0x8 35'],
        ["invalid", b' S:x6 6x0 89 false '],
        ["invalid", b'x '],
        ["invalid", b'G:x'],
        ["invalid", b' S:"; f 9xx10 00 24 29 55 ."Vw  -O Pjv 7  = &"x[ x!mx"'],
        ["invalid", b' G: ": xh >xWx"S  \\\\x& "'],
        ["invalid", b' S:x = null'],
        ["invalid", b'D: 3 49 4  82xxxx1  98 5 9 9'],
        ["invalid", b'D: x? aA R:/" ) 3xx dx; 6x/ x79xxx.  0xx 831 41  5'],
        ["invalid", b'S:1 0 1 37x2x 7x 9x null'],
        ["invalid", b'D7 9  41 / x3 4 "  ( yx"'],
        ["invalid", b' D:4 939 3 '],
        ["invalid", b'x - 2 5 46x87 x 1 73  8 /" _xF ~ 6  C "'],
        ["invalid", b'G" N |\\\\\'5x 940 9 9 482x4  71 xx0 26 '],
        ["invalid", b'xx"  =xxx 84x2  699 '],
        ["invalid", b':xxxW &x'],
        ["invalid", b'S:={"",[]}'],
    ])
    def test_invalid(self, _name, expression):
        with self.assertRaises(ParseError):
            Query([]).run(expression)


if __name__ == '__main__':
    main()
